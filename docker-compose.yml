version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: galass-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-anniversary_voting}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-anniversary_db_2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed_data.sql
      - ./data/postgres:/var/lib/postgresql/backup
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - galass-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: galass-redis
    restart: unless-stopped
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./data/redis:/var/lib/redis/backup
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - galass-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: galass-backend:latest
    container_name: galass-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-anniversary_voting}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-anniversary_db_2025}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET:-anniversary-voting-system-secret-key-2025}
      ADMIN_TOKEN: ${ADMIN_TOKEN:-admin-anniversary-2025-secret}
      CORS_ORIGIN: ${CORS_ORIGIN:-"http://localhost:8080,http://localhost:8081,http://localhost:8082"}
    volumes:
      - ./logs/backend:/app/logs
      - ./backend/uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - galass-network

  # Mobile Frontend
  mobile:
    build:
      context: ./frontend/mobile
      dockerfile: Dockerfile
    image: galass-mobile:latest
    container_name: galass-mobile
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_BASE_URL: /api
      VITE_SOCKET_URL: /socket.io
    ports:
      - "${MOBILE_PORT:-8080}:80"
    depends_on:
      - backend
    networks:
      - galass-network

  # Big Screen Display Frontend
  bigscreen:
    build:
      context: ./frontend/bigscreen
      dockerfile: Dockerfile
    image: galass-bigscreen:latest
    container_name: galass-bigscreen
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_BASE_URL: /api
      VITE_SOCKET_URL: /socket.io
    ports:
      - "${BIGSCREEN_PORT:-8081}:80"
    depends_on:
      - backend
    networks:
      - galass-network

  # Admin Panel Frontend
  admin:
    build:
      context: ./frontend/admin
      dockerfile: Dockerfile
    image: galass-admin:latest
    container_name: galass-admin
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      VITE_API_BASE_URL: http://localhost:${BACKEND_PORT:-3000}
    ports:
      - "${ADMIN_PORT:-8082}:80"
    depends_on:
      - backend
    networks:
      - galass-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: galass-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    depends_on:
      - backend
      - mobile
      - bigscreen
      - admin
    networks:
      - galass-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  galass-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16