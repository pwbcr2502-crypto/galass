version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: galass-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed_data.sql
      - ./backups:/var/lib/postgresql/backups
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - galass-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: galass-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./backups:/var/lib/redis/backups
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - galass-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: galass-backend:prod
    container_name: galass-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_TOKEN: ${ADMIN_TOKEN}
      CORS_ORIGIN: ${CORS_ORIGIN:-https://yourdomain.com}
    volumes:
      - ./logs/backend:/app/logs
      - ./backend/uploads:/app/uploads
      - ./backups:/app/backups
    expose:
      - "3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - galass-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Mobile Frontend
  mobile:
    build:
      context: ./frontend/mobile
      dockerfile: Dockerfile
    image: galass-mobile:prod
    container_name: galass-mobile-prod
    restart: always
    environment:
      NODE_ENV: production
      VUE_APP_API_BASE_URL: ${API_BASE_URL:-https://yourdomain.com/api}
      VUE_APP_WS_URL: ${WS_URL:-wss://yourdomain.com}
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - galass-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Big Screen Display Frontend
  bigscreen:
    build:
      context: ./frontend/bigscreen
      dockerfile: Dockerfile
    image: galass-bigscreen:prod
    container_name: galass-bigscreen-prod
    restart: always
    environment:
      NODE_ENV: production
      VUE_APP_API_BASE_URL: ${API_BASE_URL:-https://yourdomain.com/api}
      VUE_APP_WS_URL: ${WS_URL:-wss://yourdomain.com}
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - galass-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: galass-nginx-prod
    restart: always
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - mobile
      - bigscreen
    networks:
      - galass-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  galass-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16